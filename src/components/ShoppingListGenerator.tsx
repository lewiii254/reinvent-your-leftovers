import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Checkbox } from "@/components/ui/checkbox";
import { ShoppingCart, Download, Check, Plus, Trash2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Recipe } from "@/data/hardcodedRecipes";

interface ShoppingListGeneratorProps {
  recipe: Recipe | null;
  userIngredients?: string[];
}

const ShoppingListGenerator: React.FC<ShoppingListGeneratorProps> = ({ 
  recipe, 
  userIngredients = [] 
}) => {
  const [checkedItems, setCheckedItems] = useState<Record<string, boolean>>({});
  const [customItems, setCustomItems] = useState<string[]>([]);
  const [newItem, setNewItem] = useState("");
  const { toast } = useToast();

  if (!recipe) {
    return null;
  }

  // Normalize ingredients for comparison
  const normalizeIngredient = (ingredient: string) => {
    return ingredient.toLowerCase()
      .replace(/^\d+\s*(cups?|tbsp|tsp|lbs?|oz|cloves?|cans?|large|medium|small|whole)?\s*/, '')
      .replace(/[,()]/g, '')
      .trim();
  };

  // Find missing ingredients
  const missingIngredients = recipe.ingredients.filter(ingredient => {
    const normalized = normalizeIngredient(ingredient);
    return !userIngredients.some(userIng => 
      normalizeIngredient(userIng).includes(normalized) || 
      normalized.includes(normalizeIngredient(userIng))
    );
  });

  const toggleCheck = (ingredient: string) => {
    setCheckedItems(prev => ({
      ...prev,
      [ingredient]: !prev[ingredient]
    }));
  };

  const addCustomItem = () => {
    if (newItem.trim() && !customItems.includes(newItem.trim())) {
      setCustomItems([...customItems, newItem.trim()]);
      setNewItem("");
    }
  };

  const removeCustomItem = (item: string) => {
    setCustomItems(customItems.filter(i => i !== item));
    const { [item]: removed, ...rest } = checkedItems;
    setCheckedItems(rest);
  };

  const generateShoppingList = () => {
    const allItems = [...missingIngredients, ...customItems];
    const uncheckedItems = allItems.filter(item => !checkedItems[item]);
    
    if (uncheckedItems.length === 0) {
      toast({
        title: "Shopping list is empty",
        description: "All items have been checked off!",
        variant: "default"
      });
      return;
    }

    // Create a text shopping list
    const shoppingList = `Shopping List for: ${recipe.title}\n\n` +
      `Missing Ingredients:\n` +
      uncheckedItems.map(item => `□ ${item}`).join('\n') +
      `\n\nGenerated by Leftover Magic ✨`;

    // Download as text file
    const blob = new Blob([shoppingList], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `shopping-list-${recipe.title.toLowerCase().replace(/\s+/g, '-')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Shopping list downloaded!",
      description: `Your shopping list for "${recipe.title}" has been saved`,
    });
  };

  const allItems = [...missingIngredients, ...customItems];
  const checkedCount = Object.values(checkedItems).filter(Boolean).length;

  return (
    <Card className="mt-4 shadow-soft">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <ShoppingCart className="w-5 h-5 text-primary" />
          Shopping List Generator
          {allItems.length > 0 && (
            <Badge variant="outline" className="ml-auto">
              {checkedCount}/{allItems.length} checked
            </Badge>
          )}
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        {missingIngredients.length === 0 && customItems.length === 0 ? (
          <div className="text-center py-6 text-muted-foreground">
            <ShoppingCart className="w-12 h-12 mx-auto mb-2 opacity-50" />
            <p>Great! You have all the ingredients for this recipe.</p>
            <p className="text-sm">Add custom items below if needed.</p>
          </div>
        ) : (
          <div className="space-y-3">
            <h4 className="font-medium text-sm">Missing Ingredients:</h4>
            <div className="space-y-2">
              {missingIngredients.map((ingredient, index) => (
                <div key={index} className="flex items-center space-x-3">
                  <Checkbox
                    checked={checkedItems[ingredient] || false}
                    onCheckedChange={() => toggleCheck(ingredient)}
                  />
                  <span className={`text-sm flex-1 ${
                    checkedItems[ingredient] ? 'line-through text-muted-foreground' : ''
                  }`}>
                    {ingredient}
                  </span>
                </div>
              ))}
            </div>
          </div>
        )}

        {customItems.length > 0 && (
          <div className="space-y-3">
            <h4 className="font-medium text-sm">Custom Items:</h4>
            <div className="space-y-2">
              {customItems.map((item, index) => (
                <div key={index} className="flex items-center space-x-3">
                  <Checkbox
                    checked={checkedItems[item] || false}
                    onCheckedChange={() => toggleCheck(item)}
                  />
                  <span className={`text-sm flex-1 ${
                    checkedItems[item] ? 'line-through text-muted-foreground' : ''
                  }`}>
                    {item}
                  </span>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => removeCustomItem(item)}
                    className="h-8 w-8 p-0"
                  >
                    <Trash2 className="w-4 h-4" />
                  </Button>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Add custom item */}
        <div className="space-y-2">
          <h4 className="font-medium text-sm">Add Custom Items:</h4>
          <div className="flex gap-2">
            <input
              type="text"
              value={newItem}
              onChange={(e) => setNewItem(e.target.value)}
              placeholder="Add custom item..."
              className="flex-1 px-3 py-2 text-sm border rounded-md focus:outline-none focus:ring-2 focus:ring-primary/50"
              onKeyPress={(e) => e.key === 'Enter' && addCustomItem()}
            />
            <Button onClick={addCustomItem} variant="outline" size="sm">
              <Plus className="w-4 h-4" />
            </Button>
          </div>
        </div>

        {allItems.length > 0 && (
          <div className="pt-4 border-t">
            <div className="flex gap-2">
              <Button 
                onClick={generateShoppingList}
                className="flex-1"
                variant="outline"
              >
                <Download className="w-4 h-4 mr-2" />
                Download Shopping List
              </Button>
              {checkedCount === allItems.length && (
                <Button variant="default" disabled className="flex-1">
                  <Check className="w-4 h-4 mr-2" />
                  All Items Checked
                </Button>
              )}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default ShoppingListGenerator;